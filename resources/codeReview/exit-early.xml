<code_review xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="schema.xsd">
    <description>
        Prefer returning/throwing early, and handling null/empty cases first.
        If an else block throws or returns, switch the ordering of the if/else blocks, which will result in not having an else block.
        The line number should be the line of the `if` statement.
        If there are multiple nested if/else block violations then leave a single review comment covering all violations.
    </description>
    <file_extensions>
        <include>.ts</include>
        <include>.js</include>
    </file_extensions>
    <requires>
        <text>else</text>
    </requires>
    <examples>
        <example>
            <code><![CDATA[
                async sendBirthdayGreeting(user: User | null): Promise<void> {
                    if (user) {
                        if(user.dateOfBirth > Date.now()) {
                            if (dayOfYear(user.dateOfBirth) === dayOfYear(Date.now())) {
                                await this.emailService.sendEmail(this.createBdayEmail(user));
                            }
                        } else {
                            throw new Error(`dateOfBirth in the future for user ${user.id}`);
                        }
                    } else {
                        throw new Error('User was null');
                    }
                }
            ]]></code>
            <review_comment><![CDATA[
                Handle exceptional cases first and exit early to simplify the code flow.
                ```
                async sendBirthdayGreeting(user: User | null): Promise<void> {
                    if (!user) throw new Error('User was null');
                    if (user.dateOfBirth < Date.now()) throw new Error(`dateOfBirth in the future for user ${user.id}`);

                    if (dayOfYear(user.dateOfBirth) === dayOfYear(Date.now())) {
                        await this.emailService.sendEmail(this.createBdayEmail(user));
                    }
                }
                ```
            ]]></review_comment>
        </example>
        <example>
            <code><![CDATA[
                async function deleteReservation(): Promise<boolean> {
                    const reservations = this.getReservations();
                    if (reservations.length) {
                        await this.reservationsClient.deleteReservation({
                            name: reservations[0].name,
                        });
                        return true;
                    } else {
                        logger.info("No BigQuery reservation found.");
                        return false;
                    }
                }
            ]]></code>
            <review_comment><![CDATA[
                Handle exceptional cases first and exit early to simplify the code flow.
                ```
                async function deleteReservation(): Promise<boolean> {
                    const reservations = this.getReservations();

                    if (!reservations.length) {
                        logger.info("No BigQuery reservation found.");
                        return false;
                    }

                    await this.reservationsClient.deleteReservation({ name: reservations[0].name });
                    return true;
                }
                ```
            ]]></review_comment>
        </example>
        <example>
            <code><![CDATA[
                export function getDepositHeaders(enrichedRequest: EnrichedRequest): DepositHeadersResponse | null {
                    const depositEnrichedInfo = requestHelper.gC(enrichedRequest.request, 'depositEnrichedInfo') as DepositEnrichedInfo;
                    if (depositEnrichedInfo) {
                        return buildHeaders(depositEnrichedInfo);
                    }

                    return null;
                }
            ]]></code>
            <review_comment><![CDATA[
                Handle exceptional cases first and exit early to simplify the code flow.
                ```
                export function getDepositHeaders(enrichedRequest: EnrichedRequest): DepositHeadersResponse | null {
                    const depositEnrichedInfo = requestHelper.gC(enrichedRequest.request, 'depositEnrichedInfo') as DepositEnrichedInfo;

                    if (!depositEnrichedInfo) return null;

                    return buildHeaders(depositEnrichedInfo);
                }
                ```
            ]]></review_comment>
        </example>
    </examples>
</code_review>
